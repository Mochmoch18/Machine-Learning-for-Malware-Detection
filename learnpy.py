#Anti-Malware using Machine Learning
# Importing the libraries
import pandas as pd
import numpy as np
import pickle
import sklearn.ensemble as ske
from sklearn import model_selection, tree, linear_model
from sklearn.feature_selection import SelectFromModel
import joblib
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Importing the Dataset
data = pd.read_csv('Dataset.csv', sep='|')
X_feat = data.drop(['Name', 'md5', 'legitimate'], axis=1).values
Y_feat = data['legitimate'].values

# Important features selection
print('== Start looking for important features based on %i total features ==\n' % X_feat.shape[1])

# Features selection using ExtraTrees Classifier
Features_select = ske.ExtraTreesClassifier().fit(X_feat, Y_feat)
bestfeatures = SelectFromModel(Features_select, prefit=True)
X_new = bestfeatures.transform(X_feat)
imp_features = X_new.shape[1]
print('== %i features are identified as important ==' % imp_features)

features = []
index = np.argsort(Features_select.feature_importances_)[::-1][:imp_features]
for f in range(imp_features):
    print("%d. feature %s (%f)" % (f + 1, data.columns[2+index[f]], Features_select.feature_importances_[index[f]]))

# Take care of the feature order
for f in sorted(np.argsort(Features_select.feature_importances_)[::-1][:imp_features]):
    features.append(data.columns[2+f])

# Splitting the dataset into the Training set and Test set
X_train, X_test, Y_train, Y_test = model_selection.train_test_split\
    (X_new, Y_feat ,test_size=0.2)

#Algorithm comparison
algorithms = {
        " Decision Tree": tree.DecisionTreeClassifier(max_depth=10),
        " Random Forest": ske.RandomForestClassifier(n_estimators=50),
        " Gradient Boosting": ske.GradientBoostingClassifier(n_estimators=50),
        " AdaBoost": ske.AdaBoostClassifier(n_estimators=100),
        " GaussianNB": GaussianNB()

    }

results = {}
print("\n== Testing algorithms to identify the best one == ")

# Testing Classification algorithms with the Training dataset
for algo in algorithms:
    classifier = algorithms[algo]
    classifier.fit(X_train, Y_train)
    score = classifier.score(X_test, Y_test)
    print("---> %s : %f %%" % (algo, score*100))
    results[algo] = score
    res = classifier.predict(X_test)
    conf_mat = confusion_matrix(Y_test, res)

    print("False positive rate : FPR= %f %%" % ((conf_mat[0][1] / float(sum(conf_mat[0])))*100))
    print('False negative rate : FNR= %f %%' % ( (conf_mat[1][0] / float(sum(conf_mat[1]))*100)))

#print(results)

best_one = max(results, key=results.get)
print('\n== The best result is for the algorithm ***%s *** with a %f %% success ==' % (best_one, results[best_one]*100))

# Save the Best algorithm result and the important features list for next predictions steps
print('== Saving the best algorithm and the important features list in LearnResult directory ==')
joblib.dump(algorithms[best_one], 'LearnResult/algorithm.pkl')
#joblib.dump(features, 'classifier/features.pkl')
open('LearnResult/features.pkl', 'wb').write(pickle.dumps(features))
print('Saved')

# Predicting the Test set results
Y_predict = classifier.predict(X_test)

# Making the Confusion Matrix
confmat = confusion_matrix(Y_test, Y_predict)

# Identify false and true positive rates
clsfier = algorithms[best_one]



